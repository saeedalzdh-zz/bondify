{"version":3,"sources":["app/Routes.tsx","app/header/components/SearchBar.tsx","app/header/Header.tsx","services/gql-client.ts","epics/fetch-market-epic.ts","epics/fetch-symbol-epic.ts","store/index.ts","reducers/marketReducer.ts","reducers/symbolReducer.ts","app/App.tsx","index.tsx","constants/action-types.ts","actions/index.ts"],"names":["MarketListing","lazy","MarketDetails","Routes","fallback","CircularProgress","exact","path","component","useStyles","makeStyles","theme","createStyles","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","padding","height","pointerEvents","display","alignItems","justifyContent","root","flexGrow","paddingLeft","transition","transitions","create","SearchBar","classes","dispatch","useDispatch","marketData","useSelector","state","markets","Autocomplete","id","freeSolo","onChange","event","newValue","queries","applySearchQuery","fetchMarket","options","map","name","style","renderInput","params","className","TextField","placeholder","grow","title","Header","onDarkModeChange","AppBar","Toolbar","Typography","variant","noWrap","IconButton","color","onClick","gqlClient","ApolloClient","cache","InMemoryCache","uri","headers","authorization","FETCH_MARKET_QUERY","gql","epicMiddleware","createEpicMiddleware","rootEpic","combineEpics","action$","pipe","filter","isOfType","ACTION_TYPES","MARKET","FETCH_MARKET","mergeMap","query","response","fetchMarketFulfilled","data","assets","FETCH_SYMBOL","action","variables","marketSymbolId","payload","catch","error","symbolData","market","console","message","fetchSymbolFulfilled","rootReducer","combineReducers","type","FETCH_MARKET_FUlLFILLED","marketsData","assetName","length","ticker","trim","pair","marketSymbol","symbol","baseSymbol","marketCap","averageLastPrice","parseFloat","highPrice","lowPrice","SEARCH","APPLY_SEARCH_QUERY","item","FETCH_SYMBOL_FUlLFILLED","store","createStore","applyMiddleware","run","App","prefersDarkMode","useMediaQuery","useState","isDark","setDark","React","useMemo","createMuiTheme","primary","main","secondary","ThemeProvider","CssBaseline","ReactDOM","render","document","getElementById","fetchSymbol"],"mappings":"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","file":"static/js/main.907e2b36.chunk.js","sourcesContent":["import React, {Suspense, lazy} from \"react\";\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport {CircularProgress} from \"@material-ui/core\";\n\nconst MarketListing = lazy(() => import(\"./market-listing/MarketListing\"));\nconst MarketDetails = lazy(() => import(\"./market-details/MarketDetails\"));\n\nconst Routes = () => (\n  <Router>\n    <Suspense fallback={<CircularProgress />}>\n      <Switch>\n        <Route exact path=\"/\" component={MarketListing} />\n        <Route exact path=\"/:marketSymbolId\" component={MarketDetails} />\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport {MarketData} from \"../../../constants/interfaces\";\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {StateType} from \"../../../constants/types\";\nimport {fade, createStyles, makeStyles, Theme, TextField} from \"@material-ui/core\";\nimport {applySearchQuery, fetchMarket} from \"../../../actions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    search: {\n      position: \"relative\",\n      borderRadius: theme.shape.borderRadius,\n      backgroundColor: fade(theme.palette.common.white, 0.15),\n      \"&:hover\": {\n        backgroundColor: fade(theme.palette.common.white, 0.25),\n      },\n      marginRight: theme.spacing(2),\n      marginLeft: 0,\n      width: \"100%\",\n      [theme.breakpoints.up(\"sm\")]: {\n        marginLeft: theme.spacing(3),\n        width: \"auto\",\n      },\n    },\n    searchIcon: {\n      padding: theme.spacing(0, 2),\n      height: \"100%\",\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n    },\n    root: {\n      flexGrow: 1,\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\",\n      },\n    },\n  })\n);\n\nconst SearchBar = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const marketData = useSelector<StateType, MarketData[]>((state) => state.markets);\n\n  const handleSearch = (\n    event: React.ChangeEvent<{}>,\n    newValue: string | null\n  ): void => {\n    if (newValue) {\n      const queries: any[] = [newValue];\n      dispatch(applySearchQuery(queries));\n    } else {\n      dispatch(fetchMarket());\n    }\n  };\n\n  return (\n    <Autocomplete\n      id=\"search-bar\"\n      freeSolo\n      onChange={handleSearch}\n      options={marketData.map(({name}) => name)}\n      style={{width: 300}}\n      renderInput={(params) => (\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <TextField\n            {...params}\n            placeholder=\"Searchâ€¦\"\n            classes={{\n              root: classes.root,\n            }}\n          />\n        </div>\n      )}\n    />\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport {makeStyles, Theme, createStyles} from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport NightsStay from \"@material-ui/icons/NightsStay\";\nimport SearchBar from \"./components/SearchBar\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    grow: {\n      flexGrow: 1,\n    },\n    title: {\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n  })\n);\n\nconst Header: React.FC<{onDarkModeChange: () => void}> = ({onDarkModeChange}) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.grow}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            BONDIFY\n          </Typography>\n\n          <SearchBar />\n\n          <div className={classes.grow} />\n\n          <IconButton color=\"secondary\" onClick={onDarkModeChange}>\n            <NightsStay />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import {ApolloClient, InMemoryCache} from \"@apollo/client\";\n\nconst token = \"5fcad1da05d551989f600390b60858d38a4bea5a43c1c52461786c8a793a569f\";\n\nconst gqlClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: \"https://api.blocktap.io/graphql\",\n  headers: {\n    authorization: `Bearer ${token}`,\n    \"client-name\": \"Space Explorer [web]\",\n    \"client-version\": \"1.0.0\",\n  },\n});\n\nexport default gqlClient;\n","import {AllActionsTypes, StateType} from \"../constants/types\";\nimport ACTION_TYPES from \"../constants/action-types\";\nimport {map, filter, mergeMap} from \"rxjs/operators\";\nimport {Epic} from \"redux-observable\";\nimport {gql} from \"@apollo/client\";\nimport gqlClient from \"../services/gql-client\";\nimport {fetchMarketFulfilled} from \"../actions\";\nimport {isOfType} from \"typesafe-actions\";\n\nconst FETCH_MARKET_QUERY = gql`\n  query Markets {\n    assets(sort: {marketCap: DESC}, page: {limit: 30}) {\n      assetName\n      marketCap\n      markets(\n        filter: {\n          marketSymbol: {_like: \"%Binance%\"}\n          quoteSymbol: {_in: [\"USD\", \"USDT\"]}\n        }\n      ) {\n        id\n        marketSymbol\n        baseSymbol\n        quoteSymbol\n        ticker {\n          percentChange\n          lastPrice\n          lowPrice\n          highPrice\n          baseVolume\n          quoteVolume\n        }\n      }\n    }\n  }\n`;\n\nexport const fetchMarketEpic: Epic<AllActionsTypes, AllActionsTypes, StateType> = (\n  action$\n) =>\n  action$.pipe(\n    filter(isOfType(ACTION_TYPES.MARKET.FETCH_MARKET)),\n    mergeMap(() => gqlClient.query({query: FETCH_MARKET_QUERY})),\n    map((response) => fetchMarketFulfilled(response.data.assets))\n  );\n","import {AllActionsTypes, StateType} from \"../constants/types\";\nimport ACTION_TYPES from \"../constants/action-types\";\nimport {map, filter, mergeMap} from \"rxjs/operators\";\nimport {Epic} from \"redux-observable\";\nimport {gql} from \"@apollo/client\";\nimport gqlClient from \"../services/gql-client\";\nimport {fetchSymbolFulfilled} from \"../actions\";\nimport {isOfType} from \"typesafe-actions\";\n\nconst getFetchSymbolQuery = () => gql`\n  query marketSymbol($marketSymbolId: String) {\n    market(id: $marketSymbolId) {\n      id\n      marketSymbol\n      ticker {\n        percentChange\n        lastPrice\n        lowPrice\n        highPrice\n        baseVolume\n        quoteVolume\n      }\n    }\n  }\n`;\n\nexport const fetchSymbolEpic: Epic<AllActionsTypes, AllActionsTypes, StateType> = (\n  action$\n) =>\n  action$.pipe(\n    filter(isOfType(ACTION_TYPES.MARKET.FETCH_SYMBOL)),\n    mergeMap((action) =>\n      gqlClient\n        .query({\n          query: getFetchSymbolQuery(),\n          variables: {\n            marketSymbolId: action.payload,\n          },\n        })\n        .catch((error) => error)\n    ),\n    map((response) => {\n      let symbolData = [];\n\n      if (response.data && \"market\" in response.data) {\n        symbolData = response.data.market;\n      } else {\n        console.error(response.message);\n      }\n\n      return fetchSymbolFulfilled(symbolData);\n    })\n  );\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport {createEpicMiddleware, combineEpics} from \"redux-observable\";\n\nimport {StateType, AllActionsTypes} from \"../constants/types\";\nimport {marketReducer, symbolReducer} from \"../reducers\";\nimport {fetchMarketEpic, fetchSymbolEpic} from \"../epics\";\n\nconst epicMiddleware = createEpicMiddleware<\n  AllActionsTypes,\n  AllActionsTypes,\n  StateType\n>();\n\nconst rootEpic = combineEpics(fetchMarketEpic, fetchSymbolEpic);\n\nconst rootReducer = combineReducers({\n  markets: marketReducer,\n  symbol: symbolReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(epicMiddleware));\n\nepicMiddleware.run(rootEpic);\n\nexport default store;\n","import ACTION_TYPES from \"../constants/action-types\";\nimport {\n  FetchMarketFulfilledActionType,\n  ApplySearchQueryActionType,\n} from \"../constants/types\";\nimport {MarketData} from \"../constants/interfaces\";\n\nexport const marketReducer = (\n  state: MarketData[] = [],\n  action: FetchMarketFulfilledActionType | ApplySearchQueryActionType\n): MarketData[] => {\n  switch (action.type) {\n    case ACTION_TYPES.MARKET.FETCH_MARKET_FUlLFILLED: {\n      const marketsData: MarketData[] = action.payload\n        .filter((market: any) => {\n          const {markets} = market;\n\n          return (\n            market.assetName &&\n            markets.length &&\n            \"id\" in markets[0] &&\n            \"marketSymbol\" in markets[0] &&\n            \"baseSymbol\" in markets[0] &&\n            \"ticker\" in markets[0] &&\n            markets[0].ticker &&\n            \"highPrice\" in markets[0].ticker &&\n            \"lowPrice\" in markets[0].ticker\n          );\n        })\n        .map((market: any) => ({\n          id: market.markets[0].id.trim(),\n          name: market.assetName,\n          pair: market.markets[0].marketSymbol.trim(),\n          symbol: market.markets[0].baseSymbol.trim(),\n          marketCap: market.marketCap,\n          averageLastPrice:\n            (parseFloat(market.markets[0].ticker.highPrice) +\n              parseFloat(market.markets[0].ticker.lowPrice)) /\n            2,\n        }));\n\n      return marketsData;\n    }\n\n    case ACTION_TYPES.SEARCH.APPLY_SEARCH_QUERY: {\n      return [...state].filter((item) => item.name === action.payload[0]);\n    }\n\n    default:\n      return state;\n  }\n};\n","import ACTION_TYPES from \"../constants/action-types\";\nimport {FetchSymbolFulfilledActionType} from \"../constants/types\";\nimport {SymbolData} from \"../constants/interfaces\";\n\nexport const symbolReducer = (\n  state: SymbolData[] = [],\n  action: FetchSymbolFulfilledActionType\n): SymbolData[] => {\n  switch (action.type) {\n    case ACTION_TYPES.MARKET.FETCH_SYMBOL_FUlLFILLED: {\n      return action.payload;\n    }\n\n    default:\n      return state;\n  }\n};\n","import React, {useState} from \"react\";\nimport Routes from \"../app/Routes\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {createMuiTheme, ThemeProvider} from \"@material-ui/core/styles\";\nimport Header from \"./header/Header\";\nimport {Provider} from \"react-redux\";\nimport store from \"../store\";\n\nconst App = () => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const [isDark, setDark] = useState(true);\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: isDark && prefersDarkMode ? \"dark\" : \"light\",\n          primary: {\n            main: \"#0e4b80\",\n          },\n          secondary: {\n            main: \"#ffffff\",\n          },\n        },\n      }),\n    [isDark, prefersDarkMode]\n  );\n\n  const handleDarkModeChange = () => {\n    setDark(!isDark);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Provider store={store}>\n        <Header onDarkModeChange={handleDarkModeChange} />\n        <Routes />\n      </Provider>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","export default {\n  MARKET: {\n    FETCH_MARKET: \"FETCH_MARKET\",\n    FETCH_MARKET_FUlLFILLED: \"FETCH_MARKET_FUlLFILLED\",\n    FETCH_SYMBOL: \"FETCH_SYMBOL\",\n    FETCH_SYMBOL_FUlLFILLED: \"FETCH_SYMBOL_FUlLFILLED\",\n  },\n  SEARCH: {\n    APPLY_SEARCH_QUERY: \"APPLY_SEARCH_QUERY\",\n  },\n};\n","import ACTION_TYPES from \"../constants/action-types\";\nimport {\n  FetchMarketActionType,\n  FetchMarketFulfilledActionType,\n  FetchSymbolActionType,\n  FetchSymbolFulfilledActionType,\n  ApplySearchQueryActionType,\n} from \"../constants/types\";\n\nexport const fetchMarket = (): FetchMarketActionType => ({\n  type: ACTION_TYPES.MARKET.FETCH_MARKET,\n});\n\nexport const fetchMarketFulfilled = (\n  payload: []\n): FetchMarketFulfilledActionType => ({\n  type: ACTION_TYPES.MARKET.FETCH_MARKET_FUlLFILLED,\n  payload,\n});\n\nexport const fetchSymbol = (payload: string): FetchSymbolActionType => ({\n  type: ACTION_TYPES.MARKET.FETCH_SYMBOL,\n  payload,\n});\n\nexport const fetchSymbolFulfilled = (\n  payload: []\n): FetchSymbolFulfilledActionType => ({\n  type: ACTION_TYPES.MARKET.FETCH_SYMBOL_FUlLFILLED,\n  payload,\n});\n\nexport const applySearchQuery = (payload: any[]): ApplySearchQueryActionType => ({\n  type: ACTION_TYPES.SEARCH.APPLY_SEARCH_QUERY,\n  payload,\n});\n"],"sourceRoot":""}